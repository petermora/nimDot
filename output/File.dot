digraph {
graph [
label = "Nim type map for File";
rankdir=LR;
];
node[color=coral, style=filled, label="string" ] N0;
node[color=coral, style=filled, label="File" ] N1;
N0 -> N1 [color="", label="open(mode: FileMode = fmRead, bufSize: int = -1)" ];
node[color=coral, style=filled, label="bool" ] N2;
N1 -> N2 [color="", label="reopen(string, mode: FileMode = fmRead)" ];
node[color=coral, style=filled, label="" ] N3;
N1 -> N3 [color="", label="close" ];
N1 -> N2 [color="", label="endOfFile" ];
node[color=coral, style=filled, label="char" ] N4;
N1 -> N4 [color="", label="readChar" ];
node[color=coral, style=filled, label="TaintedString" ] N5;
N1 -> N5 [color="", label="readAll" ];
N1 -> N5 [color="", label="readLine" ];
N1 -> N2 [color="", label="readLine(var TaintedString)" ];
node[color=coral, style=filled, label="int64" ] N6;
N1 -> N6 [color="", label="getFileSize" ];
node[color=coral, style=filled, label="int" ] N7;
N1 -> N7 [color="", label="readBytes(var openArray[int8|uint8], Natural, Natural)" ];
N1 -> N7 [color="", label="readChars(var openArray[char], Natural, Natural)" ];
N1 -> N7 [color="", label="readBuffer(pointer, Natural)" ];
N1 -> N7 [color="", label="writeBytes(openArray[int8|uint8], Natural, Natural)" ];
N1 -> N7 [color="", label="writeChars(openArray[char], Natural, Natural)" ];
N1 -> N7 [color="", label="writeBuffer(pointer, Natural)" ];
N1 -> N6 [color="", label="getFilePos" ];
node[color=coral, style=filled, label="FileHandle" ] N8;
N1 -> N8 [color="", label="getFileHandle" ];
N1 -> N5 [color="green", label="lines" ];
}
