digraph {
graph [
label = "system.nim & collections/*
filtering for HashSet";
rankdir=LR;
];
node[color=coral, style=filled, label="HashSet[A]" ] N0;
node[color=coral, style=filled, label="bool" ] N1;
N0 -> N1 [color="", label="isValid" ];
node[color=coral, style=filled, label="int" ] N2;
N0 -> N2 [color="", label="len" ];
N0 -> N2 [color="", label="card" ];
node[color=coral, style=filled, label="A" ] N3;
N0 -> N3 [color="green", label="items" ];
N0 -> N1 [color="", label="contains(A)" ];
node[color=coral, style=filled, label="" ] N4;
N4 -> N0 [color="", label="initSet(initialSize=64)" ];
node[color=coral, style=filled, label="openArray[A]" ] N5;
N5 -> N0 [color="", label="toSet" ];
node[color=coral, style=filled, label="string" ] N6;
N0 -> N6 [color="", label="`$`" ];
N0 -> N0 [color="", label="union(HashSet[A])" ];
N0 -> N0 [color="", label="intersection(HashSet[A])" ];
N0 -> N0 [color="", label="difference(HashSet[A])" ];
N0 -> N0 [color="", label="symmetricDifference(HashSet[A])" ];
N0 -> N0 [color="", label="`+`(HashSet[A])" ];
N0 -> N0 [color="", label="`(HashSet[A])" ];
N0 -> N0 [color="", label="`-`(HashSet[A])" ];
N0 -> N0 [color="", label="`-+-`(HashSet[A])" ];
N0 -> N1 [color="", label="disjoint(HashSet[A])" ];
N0 -> N1 [color="", label="`<`(HashSet[A])" ];
N0 -> N1 [color="", label="`<=`(HashSet[A])" ];
N0 -> N1 [color="", label="`==`(HashSet[A])" ];
node[color=coral, style=filled, label="B ): HashSet[B]" ] N7;
N0 -> N7 [color="", label="map(proc (x)" ];
}
