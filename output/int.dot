digraph {
graph [
label = "system.nim & collections/*
filtering for int";
rankdir=LR;
];
node[color=coral, style=filled, label="T" ] N0;
node[color=coral, style=filled, label="int" ] N1;
N0 -> N1 [color="", label="sizeof" ];
node[color=coral, style=filled, label="TOpenArray" ] N2;
N2 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="string" ] N3;
N3 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="cstring" ] N4;
N4 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="array[I, T]" ] N5;
N5 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="seq[T]" ] N6;
N6 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="set[T]" ] N7;
N7 -> N1 [color="", label="card" ];
N0 -> N1 [color="", label="ord" ];
node[color=coral, style=filled, label="int8" ] N8;
N8 -> N1 [color="", label="ze" ];
node[color=coral, style=filled, label="int16" ] N9;
N9 -> N1 [color="", label="ze" ];
node[color=coral, style=filled, label="int64" ] N10;
N8 -> N10 [color="", label="ze64" ];
N9 -> N10 [color="", label="ze64" ];
node[color=coral, style=filled, label="int32" ] N11;
N11 -> N10 [color="", label="ze64" ];
N1 -> N10 [color="", label="ze64" ];
N1 -> N8 [color="", label="toU8" ];
N1 -> N9 [color="", label="toU16" ];
N10 -> N11 [color="", label="toU32" ];
N1 -> N1 [color="", label="`+` " ];
N8 -> N8 [color="", label="`+` " ];
N9 -> N9 [color="", label="`+` " ];
N11 -> N11 [color="", label="`+` " ];
N10 -> N10 [color="", label="`+` " ];
N1 -> N1 [color="", label="`-` " ];
N8 -> N8 [color="", label="`-` " ];
N9 -> N9 [color="", label="`-` " ];
N11 -> N11 [color="", label="`-` " ];
N10 -> N10 [color="", label="`-` " ];
N1 -> N1 [color="", label="`not` " ];
N8 -> N8 [color="", label="`not` " ];
N9 -> N9 [color="", label="`not` " ];
N11 -> N11 [color="", label="`not` " ];
N10 -> N10 [color="", label="`not` " ];
N1 -> N1 [color="", label="`+` (int)" ];
N8 -> N8 [color="", label="`+` (int8)" ];
N9 -> N9 [color="", label="`+` (int16)" ];
N11 -> N11 [color="", label="`+` (int32)" ];
N10 -> N10 [color="", label="`+` (int64)" ];
N1 -> N1 [color="", label="`-` (int)" ];
N8 -> N8 [color="", label="`-` (int8)" ];
N9 -> N9 [color="", label="`-` (int16)" ];
N11 -> N11 [color="", label="`-` (int32)" ];
N10 -> N10 [color="", label="`-` (int64)" ];
N1 -> N1 [color="", label="`(int)" ];
N8 -> N8 [color="", label="`(int8)" ];
N9 -> N9 [color="", label="`(int16)" ];
N11 -> N11 [color="", label="`(int32)" ];
N10 -> N10 [color="", label="`(int64)" ];
N1 -> N1 [color="", label="`div` (int)" ];
N8 -> N8 [color="", label="`div` (int8)" ];
N9 -> N9 [color="", label="`div` (int16)" ];
N11 -> N11 [color="", label="`div` (int32)" ];
N10 -> N10 [color="", label="`div` (int64)" ];
N1 -> N1 [color="", label="`mod` (int)" ];
N8 -> N8 [color="", label="`mod` (int8)" ];
N9 -> N9 [color="", label="`mod` (int16)" ];
N11 -> N11 [color="", label="`mod` (int32)" ];
N10 -> N10 [color="", label="`mod` (int64)" ];
N1 -> N1 [color="", label="`shr` (int)" ];
N8 -> N8 [color="", label="`shr` (int8)" ];
N9 -> N9 [color="", label="`shr` (int16)" ];
N11 -> N11 [color="", label="`shr` (int32)" ];
N10 -> N10 [color="", label="`shr` (int64)" ];
N1 -> N1 [color="", label="`shl` (int)" ];
N8 -> N8 [color="", label="`shl` (int8)" ];
N9 -> N9 [color="", label="`shl` (int16)" ];
N11 -> N11 [color="", label="`shl` (int32)" ];
N10 -> N10 [color="", label="`shl` (int64)" ];
N1 -> N1 [color="", label="`and` (int)" ];
N8 -> N8 [color="", label="`and` (int8)" ];
N9 -> N9 [color="", label="`and` (int16)" ];
N11 -> N11 [color="", label="`and` (int32)" ];
N10 -> N10 [color="", label="`and` (int64)" ];
N1 -> N1 [color="", label="`or` (int)" ];
N8 -> N8 [color="", label="`or` (int8)" ];
N9 -> N9 [color="", label="`or` (int16)" ];
N11 -> N11 [color="", label="`or` (int32)" ];
N10 -> N10 [color="", label="`or` (int64)" ];
N1 -> N1 [color="", label="`xor` (int)" ];
N8 -> N8 [color="", label="`xor` (int8)" ];
N9 -> N9 [color="", label="`xor` (int16)" ];
N11 -> N11 [color="", label="`xor` (int32)" ];
N10 -> N10 [color="", label="`xor` (int64)" ];
node[color=coral, style=filled, label="bool" ] N12;
N1 -> N12 [color="", label="`==` (int)" ];
N8 -> N12 [color="", label="`==` (int8)" ];
N9 -> N12 [color="", label="`==` (int16)" ];
N11 -> N12 [color="", label="`==` (int32)" ];
N10 -> N12 [color="", label="`==` (int64)" ];
N1 -> N12 [color="", label="`<=` (int)" ];
N8 -> N12 [color="", label="`<=` (int8)" ];
N9 -> N12 [color="", label="`<=` (int16)" ];
N11 -> N12 [color="", label="`<=` (int32)" ];
N10 -> N12 [color="", label="`<=` (int64)" ];
N1 -> N12 [color="", label="`<` (int)" ];
N8 -> N12 [color="", label="`<` (int8)" ];
N9 -> N12 [color="", label="`<` (int16)" ];
N11 -> N12 [color="", label="`<` (int32)" ];
N10 -> N12 [color="", label="`<` (int64)" ];
N10 -> N10 [color="", label="`+%` (int64)" ];
N10 -> N10 [color="", label="`-%` (int64)" ];
N10 -> N10 [color="", label="`(int64)" ];
N10 -> N10 [color="", label="`/%` (int64)" ];
N10 -> N10 [color="", label="`%%` (int64)" ];
N10 -> N12 [color="", label="`<=%` (int64)" ];
N10 -> N12 [color="", label="`<%` (int64)" ];
N0 -> N1 [color="", label="cmp(T)" ];
N3 -> N1 [color="", label="cmp(string)" ];
node[color=coral, style=filled, label="TaintedString" ] N13;
N13 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="float" ] N14;
N1 -> N14 [color="", label="toFloat" ];
N14 -> N1 [color="", label="toInt" ];
N1 -> N3 [color="", label="`$`" ];
N10 -> N3 [color="", label="`$`" ];
node[color=coral, style=filled, label="ref T" ] N15;
N15 -> N1 [color="", label="getRefcount" ];
N3 -> N1 [color="", label="getRefcount" ];
N6 -> N1 [color="", label="getRefcount" ];
node[color=coral, style=filled, label="" ] N16;
N16 -> N1 [color="", label="getOccupiedMem" ];
N16 -> N1 [color="", label="getFreeMem" ];
N16 -> N1 [color="", label="getTotalMem" ];
N16 -> N1 [color="", label="getOccupiedSharedMem" ];
N16 -> N1 [color="", label="getFreeSharedMem" ];
N16 -> N1 [color="", label="getTotalSharedMem" ];
N1 -> N1 [color="", label="min(int)" ];
N8 -> N8 [color="", label="min(int8)" ];
N9 -> N9 [color="", label="min(int16)" ];
N11 -> N11 [color="", label="min(int32)" ];
N10 -> N10 [color="", label="min(int64)" ];
N1 -> N1 [color="", label="max(int)" ];
N8 -> N8 [color="", label="max(int8)" ];
N9 -> N9 [color="", label="max(int16)" ];
N11 -> N11 [color="", label="max(int32)" ];
N10 -> N10 [color="", label="max(int64)" ];
N0 -> N1 [color="", label="find(S)" ];
N1 -> N1 [color="", label="abs" ];
N8 -> N8 [color="", label="abs" ];
N9 -> N9 [color="", label="abs" ];
N11 -> N11 [color="", label="abs" ];
N10 -> N10 [color="", label="abs" ];
node[color=coral, style=filled, label="File" ] N17;
N17 -> N10 [color="", label="getFileSize" ];
N17 -> N1 [color="", label="readBytes(var openArray[int8|uint8], Natural, Natural)" ];
N17 -> N1 [color="", label="readChars(var openArray[char], Natural, Natural)" ];
N17 -> N1 [color="", label="readBuffer(pointer, Natural)" ];
N17 -> N1 [color="", label="writeBytes(openArray[int8|uint8], Natural, Natural)" ];
N17 -> N1 [color="", label="writeChars(openArray[char], Natural, Natural)" ];
N17 -> N1 [color="", label="writeBuffer(pointer, Natural)" ];
N17 -> N10 [color="", label="getFilePos" ];
node[color=coral, style=filled, label="var int" ] N18;
N18 -> N1 [color="", label="atomicInc(x: int = 1)" ];
N18 -> N1 [color="", label="atomicDec(x: int = 1)" ];
N1 -> N14 [color="", label="`/`(int)" ];
N1 -> N1 [color="", label="`^`" ];
N3 -> N1 [color="", label="xlen" ];
N6 -> N1 [color="", label="xlen" ];
node[color=coral, style=filled, label="CritBitTree[T]" ] N19;
N19 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="IntSet" ] N20;
N20 -> N1 [color="green", label="items" ];
node[color=coral, style=filled, label="Queue[T]" ] N21;
N21 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="RtArray[T]" ] N22;
N22 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="expr" ] N23;
N1 -> N23 [color="blue", label="newSeqWith(expr)" ];
node[color=coral, style=filled, label="HashSet[A]" ] N24;
N24 -> N1 [color="", label="len" ];
N24 -> N1 [color="", label="card" ];
node[color=coral, style=filled, label="Natural" ] N25;
N25 -> N1 [color="", label="rightSize" ];
node[color=coral, style=filled, label="OrderedSet[A]" ] N26;
N26 -> N1 [color="", label="len" ];
N26 -> N1 [color="", label="card" ];
node[color=coral, style=filled, label="Table[A, B]" ] N27;
N27 -> N1 [color="", label="len" ];
N25 -> N1 [color="", label="rightSize" ];
node[color=coral, style=filled, label="TableRef[A, B]" ] N28;
N28 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="OrderedTable[A, B]" ] N29;
N29 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="OrderedTableRef[A, B]" ] N30;
N30 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="CountTable[A]" ] N31;
N31 -> N1 [color="", label="len" ];
N31 -> N1 [color="green", label="values" ];
N31 -> N1 [color="", label="`[]`(A)" ];
node[color=coral, style=filled, label="CountTableRef[A]" ] N32;
N32 -> N1 [color="", label="len" ];
N32 -> N1 [color="green", label="values" ];
N32 -> N1 [color="", label="`[]`(A)" ];
N3 -> N1 [color="", label="cmpIgnoreCase(string)" ];
N3 -> N1 [color="", label="cmpIgnoreStyle(string)" ];
N3 -> N1 [color="", label="countLines" ];
N1 -> N3 [color="", label="intToStr(minchars: Positive = 1)" ];
N3 -> N1 [color="", label="parseInt" ];
N3 -> N1 [color="", label="parseHexInt" ];
N3 -> N1 [color="", label="abbrev(openArray[string])" ];
N3 -> N1 [color="", label="find(string, start: Natural = 0)" ];
N3 -> N1 [color="", label="find(char, start: Natural = 0)" ];
N3 -> N1 [color="", label="find(set[char], start: Natural = 0)" ];
N3 -> N1 [color="", label="rfind(string, start: int = -1)" ];
N3 -> N1 [color="", label="rfind(char, start: int = -1)" ];
N3 -> N1 [color="", label="count(string, overlapping: bool = false)" ];
N3 -> N1 [color="", label="count(char)" ];
N3 -> N1 [color="", label="count(set[char])" ];
N3 -> N1 [color="", label="parseOctInt" ];
N3 -> N1 [color="", label="editDistance(string)" ];
}
