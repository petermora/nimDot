digraph {
graph [
label = "system.nim & collections/*
filtering for OrderedTableRef";
rankdir=LR;
];
node[color=coral, style=filled, label="OrderedTableRef[A, B]" ] N0;
node[color=coral, style=filled, label="int" ] N1;
N0 -> N1 [color="", label="len" ];
node[color=coral, style=filled, label="(A, B)" ] N2;
N0 -> N2 [color="green", label="pairs" ];
node[color=coral, style=filled, label="(A, var B)" ] N3;
N0 -> N3 [color="green", label="mpairs" ];
node[color=coral, style=filled, label="A" ] N4;
N0 -> N4 [color="green", label="keys" ];
node[color=coral, style=filled, label="B" ] N5;
N0 -> N5 [color="green", label="values" ];
node[color=coral, style=filled, label="var B" ] N6;
N0 -> N6 [color="green", label="mvalues" ];
N0 -> N5 [color="", label="`[]`(A)" ];
N0 -> N6 [color="", label="mget(A)" ];
N0 -> N6 [color="", label="mgetOrPut(A, B)" ];
node[color=coral, style=filled, label="bool" ] N7;
N0 -> N7 [color="", label="hasKey(A)" ];
node[color=coral, style=filled, label="" ] N8;
N0 -> N8 [color="", label="`[]:=`(A, B)" ];
N0 -> N8 [color="", label="add(A, B)" ];
N8 -> N0 [color="", label="newOrderedTable(initialSize=64)" ];
node[color=coral, style=filled, label="string" ] N9;
N0 -> N9 [color="", label="`$`" ];
}
